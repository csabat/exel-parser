{"version":3,"sources":["components/Selector.js","components/ParseInput.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Selector","props","react_default","a","createElement","style","onChange","handleColumnChange","map","column","value","handleRowChange","Array","fill","_","idx","num","fontSize","margin","ParseInput","state","cell","row","results","rABS","onClickHandler","e","_this","setState","setupReader","file","name","console","log","reader","FileReader","onload","data","target","result","workbook","XLSX","read","type","first_sheet_name","SheetNames","address_of_cell","concat","desired_cell","Sheets","desired_value","v","undefined","Object","toConsumableArray","readAsBinaryString","onDrop","stopPropagation","preventDefault","files","dataTransfer","from","forEach","this","onDragEnter","onDragOver","height","width","backgroundColor","border","borderRadius","onClick","padding","marginTop","Component","textAlign","Header","color","App","ParseInput_ParseInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f68e91ae.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Selector(props) {\n    let columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    return (\n        <div>\n            <select style={style} onChange={props.handleColumnChange}>\n                {columns.map(column => (<option value={column}>{column}</option>))}\n            </select>\n\n            <select style={style} onChange={props.handleRowChange}>\n                {Array(99 - 0 + 1).fill().map((_, idx) => 1 + idx).map((num) => (<option value={num}>{num}</option>))}\n            </select>\n        </div>\n\n    )\n}\n\n\nconst style= {\n    fontSize: '18px',\n    margin: '12px'\n}","import React, { Component } from 'react'\nimport XLSX from 'xlsx'\nimport Selector from './Selector';\n\nexport default class ParseInput extends Component {\n    \n\n    state = {\n        cell: 'A15',\n        column: 'A',\n        row: '1',\n        results: [],\n        rABS: true\n    }\n\n    onClickHandler = (e) => {\n        this.setState({\n            results: []\n        })\n    }\n\n    setupReader = (file) => {\n        var name = file.name;\n        console.log(name)\n        var reader = new FileReader();  \n        reader.onload = (e) => {  \n            // get file content  \n            var data = e.target.result; \n            var workbook = XLSX.read(data, { type: 'binary' });\n            var first_sheet_name = workbook.SheetNames[0];\n            var address_of_cell = `${this.state.column}${this.state.row}`;\n            var worksheet = workbook.Sheets[first_sheet_name];\n            var desired_cell = worksheet[address_of_cell];\n            var desired_value = (desired_cell ? desired_cell.v : undefined);\n            this.setState({results: [desired_value, ...this.state.results]})\n        }\n        reader.readAsBinaryString(file);\n    }\n    \n\n    onDrop = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n       \n        var files = e.dataTransfer.files;\n\n        Array.from(files).forEach(file => {\n            this.setupReader(file)\n           })\n        \n    }\n\n    handleColumnChange = (e) => {\n        console.log(e.target.value)\n        this.setState({\n            column: e.target.value\n        })\n    }\n\n    handleRowChange = (e) => {\n        console.log(e.target.value)\n        this.setState({\n            row: e.target.value\n        })\n    }\n\n    render() {\n        console.log(\"re render page\")\n        return (\n            <div style={style}>\n                <Selector handleColumnChange={this.handleColumnChange} handleRowChange={this.handleRowChange}/>\n                <div  onDrop={this.onDrop} onDragEnter={(e) => e.preventDefault()} onDragOver={e => e.preventDefault()} style={{ height: 200, width: 200, backgroundColor: 'lightGrey', margin: 'auto', border:'3px dashed grey', borderRadius: '20px' }}></div>\n                <button onClick={this.onClickHandler} style={{padding: '8px', marginTop: '12px', fontSize:'16px'}}>Reset</button>\n                {this.state.results.map(result => (<p>{result} </p>))}\n            </div>\n        )\n    }\n}\n\nconst style = {\n    margin: 'auto',\n    textAlign: 'center',\n    marginTop: '6rem'\n}","import React from 'react'\n\nexport default function Header() {\n  return (\n    <div>\n      <div style={style}>\n        1. Select cell      \n      </div>\n      <div style={style}>\n        2. Drag and Drop your Exel files \n      </div>\n    </div>\n    \n  )\n}\n\nconst style = {\n  fontSize: '48px',\n  color: 'grey',\n  textAlign: 'center',\n  marginTop: '64px'\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport ParseInput from './components/ParseInput';\nimport Header from './components/Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <ParseInput/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}